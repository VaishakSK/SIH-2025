<!DOCTYPE html>
<html lang="en" class="light">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Settings â€¢ CivicConnect</title>
  <style>
    :root {
      --bg-light: #f8fafc; --card-light: #ffffff; --text-1-light: #0f172a; --text-2-light: #64748b; --border-light: #e2e8f0;
      --bg-dark: #0d1117; --card-dark: #161b22; --text-1-dark: #e6edf3; --text-2-dark: #7d8590; --border-dark: #30363d;
      --accent: #0ea5a4; --accent-glow: 0 0 20px rgba(14, 165, 164, 0.3);
      --radius: 12px; --shadow: 0 10px 30px -15px rgba(15, 23, 42, 0.1);
    }
    .light { --bg: var(--bg-light); --card: var(--card-light); --text-1: var(--text-1-light); --text-2: var(--text-2-light); --border: var(--border-light); }
    .dark { --bg: var(--bg-dark); --card: var(--card-dark); --text-1: var(--text-1-dark); --text-2: var(--text-2-dark); --border: var(--border-dark); }
    * { box-sizing: border-box; }
    body { margin: 0; font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background: var(--bg); color: var(--text-1); transition: background .2s, color .2s; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
    .stage { min-height: 100vh; padding: 28px; }
    .container { max-width: 1100px; margin: 0 auto; }
    .settings-grid { display: grid; grid-template-columns: 260px 1fr; gap: 24px; align-items: start; }
    @media (max-width: 900px) { .settings-grid { grid-template-columns: 1fr; } }
    .settings-nav { display: flex; flex-direction: column; gap: 8px; position: sticky; top: 28px; }
    .settings-nav a {
      display: flex; align-items: center; gap: 12px; padding: 12px; border-radius: 10px; color: var(--text-2);
      text-decoration: none; font-weight: 600; transition: background .2s, color .2s, box-shadow .2s;
    }
    .settings-nav a.active { color: var(--text-1); background: var(--card); box-shadow: var(--shadow); }
    .settings-nav a:hover:not(.active) { background: var(--card); color: var(--text-1); }
    .settings-nav a svg { width: 20px; height: 20px; }
    .settings-content section { display: none; }
    .settings-content section.active { display: block; }
    .card {
      background: var(--card); border-radius: var(--radius); padding: 24px; margin-bottom: 24px;
      box-shadow: var(--shadow); border: 1px solid var(--border); transition: background .2s, border-color .2s;
    }
    h1 { margin: 0 0 24px 0; font-size: 24px; }
    h2 { margin: 0 0 16px 0; font-size: 18px; border-bottom: 1px solid var(--border); padding-bottom: 12px; }
    .field { display: flex; flex-direction: column; gap: 8px; margin-bottom: 16px; }
    label { font-weight: 600; font-size: 14px; color: var(--text-2); }
    input, select {
      padding: 12px; border-radius: 8px; border: 1px solid var(--border); background: var(--bg);
      color: var(--text-1); font-size: 14px; transition: border-color .2s, box-shadow .2s;
    }
    input:focus, select:focus { outline: none; border-color: var(--accent); box-shadow: var(--accent-glow); }
    .btn {
      padding: 12px 16px; border-radius: 8px; border: 0; cursor: pointer; background: var(--accent);
      color: #fff; font-weight: 700; transition: transform .1s, box-shadow .2s;
    }
    .btn:hover { transform: translateY(-1px); box-shadow: var(--accent-glow); }
    .grid-2 { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }
    .toggle-switch { display: flex; align-items: center; justify-content: space-between; padding: 8px 0; }
    .switch { position: relative; display: inline-block; width: 50px; height: 28px; }
    .switch input { opacity: 0; width: 0; height: 0; }
    .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; transition: .4s; border-radius: 28px; }
    .slider:before { position: absolute; content: ""; height: 20px; width: 20px; left: 4px; bottom: 4px; background-color: white; transition: .4s; border-radius: 50%; }
    input:checked + .slider { background-color: var(--accent); }
    input:checked + .slider:before { transform: translateX(22px); }
  </style>
</head>
<body>
  {{> header}}
  <div class="stage">
    <div class="container">
      <h1>Settings</h1>
      <div class="settings-grid">
        <aside class="settings-nav">
          <a href="#profile" class="active">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/></svg>
            <span>Profile</span>
          </a>
          <a href="#security">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/></svg>
            <span>Security</span>
          </a>
          <a href="#appearance">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.373 3.373 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/></svg>
            <span>Appearance</span>
          </a>
          <a href="#permissions">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
            <span>Permissions</span>
          </a>
        </aside>
        <main class="settings-content">
          <section id="profile" class="active">
            <div class="card">
              <h2>Personal Information</h2>
              <form action="/settings/profile" method="POST">
                <div class="grid-2">
                  <div class="field"><label for="firstName">First Name</label><input type="text" id="firstName" name="firstName" value="{{currentUser.firstName}}"></div>
                  <div class="field"><label for="lastName">Last Name</label><input type="text" id="lastName" name="lastName" value="{{currentUser.lastName}}"></div>
                </div>
                <div class="field"><label for="username">Username</label><input type="text" id="username" name="username" value="{{currentUser.username}}"></div>
                <div class="field"><label for="email">Email</label><input type="email" id="email" name="email" value="{{currentUser.email}}"></div>
                <div class="field"><label for="phoneNumber">Phone Number</label><input type="tel" id="phoneNumber" name="phoneNumber" value="{{currentUser.phoneNumber}}"></div>
                <div class="field"><label for="address">Address</label><input type="text" id="address" name="address" value="{{currentUser.address}}"></div>
                <div class="grid-2">
                  <div class="field"><label for="age">Age</label><input type="number" id="age" name="age" value="{{currentUser.age}}"></div>
                  <div class="field"><label for="sex">Sex</label><select id="sex" name="sex"><option value="male" {{#if (eq currentUser.sex "male")}}selected{{/if}}>Male</option><option value="female" {{#if (eq currentUser.sex "female")}}selected{{/if}}>Female</option><option value="other" {{#if (eq currentUser.sex "other")}}selected{{/if}}>Other</option></select></div>
                </div>
                <button type="submit" class="btn">Save Profile</button>
              </form>
            </div>
          </section>
          <section id="security">
            <div class="card">
              <h2>Change Password</h2>
              <form action="/settings/password" method="POST">
                <div class="field"><label for="currentPassword">Current Password</label><input type="password" id="currentPassword" name="currentPassword" required></div>
                <div class="field"><label for="newPassword">New Password</label><input type="password" id="newPassword" name="newPassword" required></div>
                <div class="field"><label for="confirmPassword">Confirm New Password</label><input type="password" id="confirmPassword" name="confirmPassword" required></div>
                <button type="submit" class="btn">Change Password</button>
              </form>
            </div>
          </section>
          <section id="appearance">
            <div class="card">
              <h2>Appearance</h2>
              <div class="toggle-switch"><span>Dark Mode</span><label class="switch"><input type="checkbox" id="theme-toggle"><span class="slider"></span></label></div>
            </div>
          </section>
          <section id="permissions">
            <div class="card">
              <h2>Permissions</h2>
              <div class="toggle-switch"><span>Camera Access</span><button id="cameraBtn" class="btn">Request Camera</button></div>
              <hr style="border: 0; border-top: 1px solid var(--border); margin: 16px 0;">
              <div class="toggle-switch"><span>Location Access</span><button id="locationBtn" class="btn">Request Location</button></div>
            </div>
          </section>
        </main>
      </div>
    </div>
  </div>
  {{> footer}}
  <script>
    // Navigation
    const navLinks = document.querySelectorAll('.settings-nav a');
    const sections = document.querySelectorAll('.settings-content section');
    navLinks.forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        navLinks.forEach(l => l.classList.remove('active'));
        sections.forEach(s => s.classList.remove('active'));
        link.classList.add('active');
        document.getElementById(targetId).classList.add('active');
        window.history.pushState(null, '', ' ' + link.getAttribute('href'));
      });
    });
    // Theme switcher
    const themeToggle = document.getElementById('theme-toggle');
    const docEl = document.documentElement;
    const currentTheme = localStorage.getItem('theme');
    if (currentTheme === 'dark') { docEl.classList.add('dark'); themeToggle.checked = true; }
    themeToggle.addEventListener('change', function() {
      if (this.checked) { docEl.classList.add('dark'); localStorage.setItem('theme', 'dark'); }
      else { docEl.classList.remove('dark'); localStorage.setItem('theme', 'light'); }
    });
    // Permissions
    document.getElementById('cameraBtn').addEventListener('click', () => { navigator.mediaDevices.getUserMedia({ video: true }).then(() => alert('Camera access granted!')).catch(() => alert('Camera access denied.')); });
    document.getElementById('locationBtn').addEventListener('click', () => { navigator.geolocation.getCurrentPosition(() => showNotification('Location access granted!', 'success'), () => showNotification('Location access denied.', 'error')); });
  </script>
</body>
</html>